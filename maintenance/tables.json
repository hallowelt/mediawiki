[
	{
		"name": "site_identifiers",
		"comment": "Links local site identifiers to their corresponding site.",
		"columns": [
			{
				"name": "si_type",
				"comment": "local key type, ie 'interwiki' or 'langlink'",
				"type": "binary",
				"options": { "length": 32, "notnull": true }
			},
			{
				"name": "si_key",
				"comment": "local key value, ie 'en' or 'wiktionary'",
				"type": "binary",
				"options": { "length": 32, "notnull": true }
			},
			{
				"name": "si_site",
				"comment": "Key on site.site_id",
				"type": "integer",
				"options": { "unsigned": true, "notnull": true }
			}
		],
		"indexes": [
			{ "name": "site_ids_site", "columns": [ "si_site" ], "unique": false },
			{ "name": "site_ids_key", "columns": [ "si_key" ], "unique": false }
		],
		"pk": [ "si_type", "si_key" ]
	},
	{
		"name": "updatelog",
		"comment": "A table to log updates, one text key row per update.",
		"columns": [
			{
				"name": "ul_key",
				"type": "string",
				"options": { "length": 255, "notnull": true }
			},
			{
				"name": "ul_value",
				"type": "blob",
				"options": { "length": 65530, "notnull": false }
			}
		],
		"indexes": [],
		"pk": [ "ul_key" ]
	},
	{
		"name": "actor",
		"comment": "The \"actor\" table associates user names or IP addresses with integers for the benefit of other tables that need to refer to either logged-in or logged-out users. If something can only ever be done by logged-in users, it can refer to the user table directly.",
		"columns": [
			{
				"name": "actor_id",
				"comment": "Unique ID to identify each actor",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": true, "autoincrement": true }
			},
			{
				"name": "actor_user",
				"comment": "Key to user.user_id, or NULL for anonymous edits",
				"type": "integer",
				"options": { "unsigned": true, "notNull": false }
			},
			{
				"name": "actor_name",
				"comment": "Text username or IP address",
				"type": "binary",
				"options": { "length": 255, "notnull": true }
			}
		],
		"indexes": [
			{ "name": "actor_user", "columns": [ "actor_user" ], "unique": true },
			{ "name": "actor_name", "columns": [ "actor_name" ], "unique": true }
		],
		"pk": [ "actor_id" ]
	},
	{
		"name": "user_former_groups",
		"comment": "Stores the groups the user has once belonged to. The user may still belong to these groups (check user_groups). Autopromotion of users to groups from which they were removed can be restricted by using wgAutopromoteOnce instead of wgAutopromote.",
		"columns": [
			{
				"name": "ufg_user",
				"comment": "Key to user_id",
				"type": "integer",
				"options": { "unsigned": true, "notnull": true, "default": 0 }
			},
			{
				"name": "ufg_group",
				"type": "binary",
				"options": { "length": 255, "notnull": true, "default": "" }
			}
		],
		"indexes": [],
		"pk": [ "ufg_user", "ufg_group" ]
	},
	{
		"name": "bot_passwords",
		"comment": "This table contains a user's bot passwords: passwords that allow access to the account via the API with limited rights.",
		"columns": [
			{
				"name": "bp_user",
				"comment": "User ID obtained from CentralIdLookup.",
				"type": "integer",
				"options": { "unsigned": true, "notnull": true }
			},
			{
				"name": "bp_app_id",
				"comment": "Application identifier.",
				"type": "binary",
				"options": { "length": 32, "notnull": true }
			},
			{
				"name": "bp_password",
				"comment": "Password hashes, like user.user_password.",
				"type": "blob",
				"options": { "length": 255, "notnull": true }
			},
			{
				"name": "bp_token",
				"comment": "Like user.user_token",
				"type": "binary",
				"options": { "length": 32, "notnull": true, "default": "", "fixed": true }
			},
			{
				"name": "bp_restrictions",
				"comment": "JSON blob for MWRestrictions",
				"type": "blob",
				"options": { "length": 65535, "notnull": true }
			},
			{
				"name": "bp_grants",
				"comment": "Grants allowed to the account when authenticated with this bot-password",
				"type": "blob",
				"options": { "length": 65535, "notnull": true }
			}
		],
		"indexes": [],
		"pk": [ "bp_user", "bp_app_id" ]
	},
	{
		"name": "comment",
		"comment": "Edits, blocks, and other actions typically have a textual comment describing the action. They are stored here to reduce the size of the main tables, and to allow for deduplication. Deduplication is currently best-effort to avoid locking on inserts that would be required for strict deduplication. There MAY be multiple rows with the same comment_text and comment_data.",
		"columns": [
			{
				"name": "comment_id",
				"comment": "Unique ID to identify each comment",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": true, "autoincrement": true }
			},
			{
				"name": "comment_hash",
				"comment": "Hash of comment_text and comment_data, for deduplication",
				"type": "integer",
				"options": { "notnull": true }
			},
			{
				"name": "comment_text",
				"comment": "Text comment summarizing the change. This text is shown in the history and other changes lists, rendered in a subset of wiki markup by Linker::formatComment(). Size limits are enforced at the application level, and should take care to crop UTF-8 strings appropriately.",
				"type": "blob",
				"options": { "length": 65535, "notnull": true }
			},
			{
				"name": "comment_data",
				"comment": "JSON data, intended for localizing auto-generated comments. This holds structured data that is intended to be used to provide localized versions of automatically-generated comments. When not empty, comment_text should be the generated comment localized using the wiki's content language.",
				"type": "blob",
				"options": { "length": 65535, "notnull": false }
			}
		],
		"indexes": [
			{ "name": "comment_hash", "columns": [ "comment_hash" ], "unique": false }
		],
		"pk": [ "comment_id" ]
	},
	{
		"name": "slots",
		"comment": "Slots represent an n:m relation between revisions and content objects. A content object can have a specific \"role\" in one or more revisions. Each revision can have multiple content objects, each having a different role.",
		"columns": [
			{
				"name": "slot_revision_id",
				"comment": "reference to rev_id or ar_rev_id",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": true }
			},
			{
				"name": "slot_role_id",
				"comment": "reference to role_id",
				"type": "smallint",
				"options": { "unsigned": true, "notnull": true }
			},
			{
				"name": "slot_content_id",
				"comment": "reference to content_id",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": true }
			},
			{
				"name": "slot_origin",
				"comment": "The revision ID of the revision that originated the slot's content. To find revisions that changed slots, look for slot_origin = slot_revision_id. TODO: Is that actually true? Rollback seems to violate it by setting slot_origin to an older rev_id. Undeletions could result in the same situation.",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": true }
			}
		],
		"indexes": [
			{
				"name": "slot_revision_origin_role",
				"columns": [ "slot_revision_id", "slot_origin", "slot_role_id" ],
				"comment": "Index for finding revisions that modified a specific slot",
				"unique": false
			}
		],
		"pk": [ "slot_revision_id", "slot_role_id" ]
	},
	{
		"name": "site_stats",
		"comment": "Contains a single row with some aggregate info on the state of the site.",
		"columns": [
			{
				"name": "ss_row_id",
				"comment": "The single row should contain 1 here.",
				"type": "integer",
				"options": { "unsigned": true, "notnull": true }
			},
			{
				"name": "ss_total_edits",
				"comment": "Total number of edits performed.",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": false, "default": null }
			},
			{
				"name": "ss_good_articles",
				"comment": "See SiteStatsInit::articles().",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": false, "default": null }
			},
			{
				"name": "ss_total_pages",
				"comment": "Total pages, theoretically equal to SELECT COUNT(*) FROM page.",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": false, "default": null }
			},
			{
				"name": "ss_users",
				"comment": "Number of users, theoretically equal to SELECT COUNT(*) FROM user.",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": false, "default": null }
			},
			{
				"name": "ss_active_users",
				"comment": "Number of users that still edit.",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": false, "default": null }
			},
			{
				"name": "ss_images",
				"comment": "Number of images, equivalent to SELECT COUNT(*) FROM image.",
				"type": "bigint",
				"options": { "unsigned": true, "notnull": false, "default": null }
			}
		],
		"indexes": [],
		"pk": [ "ss_row_id" ]
	}
]
